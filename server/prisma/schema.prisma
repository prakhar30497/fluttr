// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String     @id @default(uuid())
  title     String
  body      String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comment[]
  likes     PostLike[]
  group     Group?     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String?
}

model User {
  id            String     @id @default(uuid())
  isAdmin       Boolean    @default(false)
  name          String
  handle        String     @unique
  email         String     @unique
  password      String
  about         String?
  avatar        String?
  location      String?
  posts         Post[]
  createdAt     DateTime   @default(now())
  comments      Comment[]
  likes         Like[]
  postLikes     PostLike[]
  refreshTokens RefreshToken[]
  groups        Group[]    @relation("member")
  createdGroups Group[]    @relation("owner")
  followedBy    Follows[]  @relation("following")
  following     Follows[]  @relation("follower")
  sentMessages     Message[] @relation("sender")
  receivedMessages Message[] @relation("recipient")
  chats          ChatParticipant[] 
  // friends         User[] @relation("friends")
  // friendsRelation User[] @relation("friends")
}

model Comment {
  id        String    @id @default(uuid())
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[] @relation("ParentChild")
  parentId  String?
  likes     Like[]
}

model Like {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String

  @@id([userId, commentId])
}

model PostLike {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  postId String

  @@id([userId, postId])
}

model Group {
  id         String   @id @default(uuid())
  name       String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime @default(now())
  owner      User     @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
  members    User[]   @relation("member")
  posts      Post[]
}

model Category {
  id     String  @id @default(uuid())
  name   String
  groups Group[]
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@id([followerId, followingId])
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Message {
  id           String   @id @default(uuid())
  content      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sender       User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId     String
  recipient    User     @relation("recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId  String
  chat         Chat     @relation(fields: [chatId], references: [id])
  chatId       String
}

model Chat {
  id            String            @id @default(uuid())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  participants  ChatParticipant[]
  messages      Message[]
}

model ChatParticipant {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  chat     Chat   @relation(fields: [chatId], references: [id])
  chatId   String
}
